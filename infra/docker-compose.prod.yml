version: "3.9"

services:
  postgres:
    image: postgres:16
    container_name: recs_postgres
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7
    container_name: recs_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    container_name: recs_api
    env_file:
      - ../.env
    environment:
      POSTGRES_HOST: postgres
      REDIS_URL: ${REDIS_URL}
      REGION: ${REGION}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/readyz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  recsys:
    build:
      context: ../services/recsys
      dockerfile: Dockerfile
    container_name: recs_recsys
    env_file:
      - ../.env
    environment:
      POSTGRES_HOST: postgres
      REDIS_URL: ${REDIS_URL}
      REGION: ${REGION}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-lc", "rq info >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  scheduler:
    build:
      context: ../services/recsys
      dockerfile: Dockerfile
    container_name: recs_scheduler
    env_file:
      - ../.env
    environment:
      POSTGRES_HOST: postgres
      REDIS_URL: ${REDIS_URL}
      REGION: ${REGION}
      DAILY_REFRESH_LIMIT: ${DAILY_REFRESH_LIMIT}
      DAILY_REFRESH_HOUR: ${DAILY_REFRESH_HOUR}
    command: ["python", "-m", "services.recsys.scheduler"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped

  web:
    build:
      context: ../apps/web
      dockerfile: Dockerfile.prod
    container_name: recs_web
    env_file:
      - ../.env
    environment:
      NEXT_PUBLIC_API_URL: http://api:8000
      NODE_ENV: production
    depends_on:
      api:
        condition: service_started
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: recs_prometheus
    depends_on:
      api:
        condition: service_started
    environment:
      - RECS_TARGET_P95_MS=${RECS_TARGET_P95_MS:-250}
      - RECS_LATENCY_FOR_MIN=${RECS_LATENCY_FOR_MIN:-10}
      - STALE_RATIO_WARN=${STALE_RATIO_WARN:-0.30}
      - STALE_RATIO_FOR_MIN=${STALE_RATIO_FOR_MIN:-20}
      - ERROR_RATE_HIGH_10M=${ERROR_RATE_HIGH_10M:-50}
      - ERROR_RATE_FOR_MIN=${ERROR_RATE_FOR_MIN:-10}
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/alerts/recs.rules.yml.tmpl:/etc/prometheus/recs.rules.yml.tmpl:ro
      - prometheus-data:/prometheus
    command: >
      sh -c "
      envsubst < /etc/prometheus/recs.rules.yml.tmpl > /etc/prometheus/recs.rules.yml &&
      /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
      "
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: recs_grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/recs-dashboard.json:/var/lib/grafana/dashboards/recs-dashboard.json:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: recs_alertmanager
    environment:
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
    volumes:
      - ./infra/alertmanager/alertmanager.yml.tmpl:/etc/alertmanager/alertmanager.yml.tmpl:ro
    command: >
      sh -c "
      envsubst < /etc/alertmanager/alertmanager.yml.tmpl > /etc/alertmanager/alertmanager.yml &&
      /bin/alertmanager --config.file=/etc/alertmanager/alertmanager.yml --storage.path=/alertmanager"
    ports:
      - "9093:9093"
    restart: unless-stopped

  teams-relay:
    image: python:3.11-slim
    container_name: recs_teams_relay
    environment:
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    volumes:
      - ./infra/relay:/app
    working_dir: /app
    command: sh -c "pip install flask requests && python teams_relay.py"
    ports:
      - "5001:5000"
    restart: unless-stopped

volumes:
  pgdata:
  prometheus-data:
  grafana-data:
